<!DOCTYPE html>
<html>
	<head>
		<title>Add City Cuts Recipients</title>
		<meta name="viewport" content="initial-scale=1.0, user-scalable=no">
		<meta charset="utf-8">
		<link rel="stylesheet" href="https://bootswatch.com/4/cerulean/bootstrap.min.css" media="screen">
		<style type="text/css">
			/*input { margin:1em 1px 0 0; }*/
			#add_participant { padding:1em; }

			/*.form-control { width:inherit; display:inline; }*/
/*			@media only screen and (max-device-width: 812px) and (orientation: portrait) { 
				#add_participant fieldset label { width:100%; display:block; }
				#add_participant .form-control { width:100%; display:block; }
			}
*/		</style>
		<script src="https://code.jquery.com/jquery-3.1.1.min.js" integrity="sha256-hVVnYaiADRTO2PzUGmuLJr8BLUSjGIZsDYGmIJLv2b8=" crossorigin="anonymous"></script>
		<script>
			$(function(){
				$('#add_participant').on('submit', function(e){
					e.preventDefault();

					$('.btn-primary').val('Adding').prop('disabled', true);
					$.ajax({
						type: "POST",
						url: "/participants",
						dataType: "json",
						contentType: "application/json; charset=utf-8",
						data: JSON.stringify({
							"Firstname":$('#Firstname').val(),
							"Lastname":$('#Lastname').val(),
							"Street":$('#street_number').val()+' '+$('#route').val(),
							"City":$('#locality').val(),
							"State":$('#administrative_area_level_1').val(),
							"Zip":$('#postal_code').val(),
							"Phone_Number":$('#Phone_Number').val(),
							"Email":$('#Email').val(),
							"type":$('input[name=type]:checked').attr('id'),
							"matched":false
						}),
						success: function(response){ 
							$('input').val('');
							$('.btn-primary').val('Add').prop('disabled', false);
						},
					});

				});
			});
		</script>
	</head>
	<body>
		<form id="add_participant">
			<fieldset>
				<label for="Firstname">First
					<input class="form-control" id="Firstname" required>
				</label>
				<label for="Lastname">Last
					<input class="form-control" id="Lastname" required>
				</label>
				<label for="Phone_Number">Phone
					<input type="tel" class="form-control" id="Phone_Number" required>
				</label>
				<label for="Email">Email
					<input type="email" class="form-control" id="Email" required>
				</label>
			</fieldset>
			<fieldset>
				<label for="autocomplete">Address
					<input class="form-control" id="autocomplete" placeholder="" type="text">
				</label>
			</fieldset>
			<fieldset>
				<label for="street_number">Number
					<input class="form-control" id="street_number" disabled="true" required>
				</label>
				<label for="route">Street
					<input class="form-control" id="route" disabled="true" required>
				</label>
				<label for="locality">City
					<input class="form-control" id="locality" disabled="true" required>
				</label>
				<label for="administrative_area_level_1">State
					<input class="form-control" id="administrative_area_level_1" disabled="true" required>
				</label>
				<label for="postal_code">Zip
					<input class="form-control" id="postal_code" disabled="true" required>
				</label>
			</fieldset>
			<input type="submit" value="Add" class="btn btn-primary">
		</form>
		<script>
			var placeSearch, 
				autocomplete,
				componentForm = {
					street_number: 'short_name',
					route: 'long_name',
					locality: 'long_name',
					administrative_area_level_1: 'short_name',
					postal_code: 'short_name'
				};

			function initAutocomplete() {
				// Create the autocomplete object, restricting the search to geographical
				// location types.
				autocomplete = new google.maps.places.Autocomplete(
						/** @type {!HTMLInput Element} */(document.getElementById('autocomplete')),
						{types: ['geocode']});

				// When the user selects an address from the dropdown, populate the address
				// fields in the form.
				autocomplete.addListener('place_changed', fillInAddress);
			}

			function fillInAddress() {
				// Get the place details from the autocomplete object.
				var place = autocomplete.getPlace();

				for (var component in componentForm) {
					document.getElementById(component).value = '';
					document.getElementById(component).disabled = false;
				}

				// Get each component of the address from the place details
				// and fill the corresponding field on the form.
				for (var i = 0; i < place.address_components.length; i++) {
					var addressType = place.address_components[i].types[0];
					if (componentForm[addressType]) {
						var val = place.address_components[i][componentForm[addressType]];
						document.getElementById(addressType).value = val;
					}
				}
			}

			// Bias the autocomplete object to the user's geographical location,
			// as supplied by the browser's 'navigator.geolocation' object.
			function geolocate() {
				if (navigator.geolocation) {
					navigator.geolocation.getCurrentPosition(function(position) {
						var geolocation = {
							lat: position.coords.latitude,
							lng: position.coords.longitude
						};
						var circle = new google.maps.Circle({
							center: geolocation,
							radius: position.coords.accuracy
						});
						autocomplete.setBounds(circle.getBounds());
					});
				}
			}
		</script>
		<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBQuiOPnaSB9NhBkzB8yTHwhBl8-qVV9mA&libraries=places&callback=initAutocomplete" async defer></script>
	</body>
</html>